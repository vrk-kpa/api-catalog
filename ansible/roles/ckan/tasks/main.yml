---

- name: Check existance of node_modules
  stat:
    path: "{{ apicatalog_ui_path }}/node_modules"
  register: node_modules

- fail:
    msg: Please run npm install in ckanext_apicatalog_ui on host machine
  when: not node_modules.stat.exists

- name: Install project requirements
  pip:
   requirements: "{{ playbook_dir }}/../requirements.txt"
   virtualenv: "{{ virtualenv }}"
  register: ckan_installation

- name: Install CKAN requirements
  pip: requirements={{ virtualenv }}/src/ckan/requirements.txt virtualenv={{ virtualenv }} state=latest

- name: Install CKAN dev requirements
  pip: requirements={{ virtualenv }}/src/ckan/dev-requirements.txt virtualenv={{ virtualenv }} state=latest
  when: deployment_environment_id == "vagrant"

- name: Re-install project requirements as ckan requirements might override them
  pip:
    requirements: "{{ playbook_dir }}/../requirements.txt"
    virtualenv: "{{ virtualenv }}"


- name: Create CKAN paths
  file: path={{ item }} state=directory mode="0770" owner={{ www_user }} group={{ www_group }}
  with_items:
    - "{{ ckan_storage_path }}"
    - "{{ ckan_uploads_path }}"
    - /etc/ckan/default

- name: Ensure path ownerships
  file: path={{ item }} state=directory recurse=yes owner={{ www_user }} group={{ www_group }}
  with_items:
    - "{{ ckan_storage_path }}"
    - "{{ ckan_uploads_path }}"
    - /etc/ckan/default
    - "{{ ckan_public_source_path }}"

- name: Find public certificate status
  stat: path={{ server_path }}/{{ xroad_securityserver_public_cert_filename }}
  register: ss_public_cert

- name: Register warning about public certificate
  set_stats:
    data:
      warnings: '{{ warnings | default([]) + ["[WARNING] You need to add the public SSL certificate manually to {{ server_path }}/{{ xroad_securityserver_public_cert_filename }}"] }}'
  when: ss_public_cert.stat.exists==False


- name: Make sure public cert has proper file permissions
  file:
    dest: "{{ server_path }}/{{ xroad_securityserver_public_cert_filename }}"
    owner: "{{ www_user }}"
    group: "{{ www_user }}"
    mode: "0600"
  when: ss_public_cert.stat.exists

- name: Find private certificate status
  stat: path={{ server_path }}/{{ xroad_securityserver_private_cert_filename }}
  register: ss_private_cert

- name: Register warning about private certificate
  set_stats:
    data:
      warnings: '{{ warnings | default([]) + ["[WARNING] You need to add the private SSL certificate manually to {{ server_path }}/{{ xroad_securityserver_private_cert_filename }}"]  }}'
  when: ss_private_cert.stat.exists==False


- name: Make sure private cert has proper file permissions
  file:
    dest: "{{ server_path }}/{{ xroad_securityserver_private_cert_filename }}"
    owner: "{{ www_user }}"
    group: "{{ www_user }}"
    mode: "0600"
  when: ss_private_cert.stat.exists


- name: Copy CKAN configuration
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }} owner={{ item.owner }} group={{ item.group }}
  with_items:
    - { src: ckan.py, dest: /usr/bin/ckan, mode: "0755", owner: root, group: root }
    - { src: ckan.ini.j2, dest: "{{ ckan_ini }}", mode: "0640", owner: root, group: "{{ www_group }}" }
    - { src: apache.wsgi.j2, dest: /etc/ckan/default/apache.wsgi, mode: "0640", owner: root, group: "{{ www_group }}" }
    - { src: who.ini.j2, dest: /etc/ckan/default/who.ini, mode: "0640", owner: root, group: "{{ www_group }}" }

- include: patch.yml

- include: database.yml

- name: Disable emails in cron
  cronvar: name="MAILTO" value="\"\""

# Check new harvester jobs twice a day, does not execute harvesting if there are no new jobs
- name: Ensure harvester cronjob
  cron: name="Harvester run" minute="*/15" job="/usr/lib/ckan/default/bin/paster --plugin=ckanext-harvest harvester run --config={{ ckan_ini }}"

- name: Ensure xroad organization data cronjob
  cron: name="X-Road organization data update" special_time=daily job="/usr/lib/ckan/default/bin/paster --plugin=ckanext-xroad_integration xroad update_xroad_organizations --config={{ ckan_ini }}"

- name: Ensure tracking cronjob
  cron: name="Tracking update" special_time=hourly job="{{ virtualenv }}/bin/paster --plugin=ckan tracking update -c {{ ckan_ini }} && {{ virtualenv }}/bin/paster --plugin=ckan search-index rebuild -r -c {{ ckan_ini }}"

- name: Ensure link validation cronjob
  cron: name="Link validator update" special_time=weekly job="{{ virtualenv }}/bin/paster --plugin=ckanext-validate_links links crawl -c {{ ckan_ini }}"

- name: Ensure fetch xroad errors cronjob
  cron: name="Fetch XRoad Errors" special_time=daily job="{{ virtualenv }}/bin/paster --plugin=ckanext-xroad_integration xroad fetch_errors -c {{ ckan_ini }}"

- name: Ensure fetch xroad stats cronjob
  cron: name="Fetch X-Road Stats" special_time=daily job="{{ virtualenv }}/bin/paster --plugin=ckanext-xroad_integration xroad fetch_stats -c {{ ckan_ini }}"

- name: Ensure fetch xroad services cronjob
  cron: name="Fetch X-Road Services" special_time=daily job="{{ virtualenv }}/bin/paster --plugin=ckanext-xroad_integration xroad fetch_service_list -c {{ ckan_ini }}"


- name: Send harvester status report emails as a cron job
  cron:
    name: "Send harvester status report emails"
    minute: "0"
    hour: "11"
    job: "{{ virtualenv }}/bin/paster --plugin=ckanext-apicatalog_routes apicatalog-harvest send-status-emails --force --config={{ ckan_ini }}"

- name: Disallow robots
  template: src={{ search_engine_robots_filename }} dest={{ virtualenv }}/src/ckan/ckan/public/robots.txt owner=root group=root mode=0644
  when: not robots_allowed

- name: Restart Apache (stop)
  service: name=apache2 state=stopped

- name: Restart Apache (wait)
  wait_for:
    host: "127.0.0.1"
    port: "{{ ckan_internal_port }}"
    timeout: 60
    state: stopped

- name: Restart Apache (start)
  service: name=apache2 state=started

