---

- name: Check existance of node_modules
  stat:
    path: "{{ apicatalog_path }}/node_modules"
  register: node_modules

- fail:
    msg: Please run npm install in ckanext_apicatalog on host machine
  when: not node_modules.stat.exists

- name: Copy project setuptools requirements
  copy:
    src: "requirement-setuptools.txt"
    dest: "{{ cache_path }}/requirement-setuptools.txt"
    mode: "0644"
    owner: root
    group: root

- name: Install project setuptools requirements
  pip:
    requirements: "{{ cache_path }}/requirement-setuptools.txt"
    virtualenv: "{{ virtualenv }}"

- name: Copy Project requirements
  copy:
    src: "{{ playbook_dir }}/../requirements.txt"
    dest: "{{ cache_path }}/requirements.txt"
    mode: "0644"
    owner: root
    group: root

- name: "Workaround: remove `typing` before installing CKAN to fix reprovisioning"
  pip:
    name: typing
    state: absent
    virtualenv: "{{ virtualenv }}"

- name: Install project requirements
  pip:
   requirements: "{{ cache_path }}/requirements.txt"
   virtualenv: "{{ virtualenv }}"
  register: ckan_installation

#- name: Install CKAN requirements
#  pip: requirements={{ virtualenv }}/src/ckan/requirements.txt virtualenv={{ virtualenv }} state=latest

- name: Install CKAN dev requirements
  pip: requirements={{ virtualenv }}/src/ckan/dev-requirements.txt virtualenv={{ virtualenv }} state=latest
  when: deployment_environment_id == "vagrant"

- name: Create CKAN paths
  file: path={{ item }} state=directory mode="0770" owner={{ www_user }} group={{ www_group }}
  with_items:
    - "{{ ckan_storage_path }}"
    - "{{ ckan_uploads_path }}"
    - /etc/ckan/default
    - /var/log/ckan

- name: Ensure path ownerships
  file: path={{ item }} state=directory recurse=yes owner={{ www_user }} group={{ www_group }}
  with_items:
    - "{{ ckan_storage_path }}"
    - "{{ ckan_uploads_path }}"
    - /etc/ckan/default
    - "{{ ckan_public_source_path }}"

- name: Find public certificate status
  stat: path={{ server_path }}/{{ xroad_securityserver_public_cert_filename }}
  register: ss_public_cert

- name: Register warning about public certificate
  set_stats:
    data:
      warnings: '{{ warnings | default([]) + ["[WARNING] You need to add the public SSL certificate manually to {{ server_path }}/{{ xroad_securityserver_public_cert_filename }}"] }}'
  when: ss_public_cert.stat.exists==False


- name: Make sure public cert has proper file permissions
  file:
    dest: "{{ server_path }}/{{ xroad_securityserver_public_cert_filename }}"
    owner: "{{ www_user }}"
    group: "{{ www_user }}"
    mode: "0600"
  when: ss_public_cert.stat.exists

- name: Find private certificate status
  stat: path={{ server_path }}/{{ xroad_securityserver_private_cert_filename }}
  register: ss_private_cert

- name: Register warning about private certificate
  set_stats:
    data:
      warnings: '{{ warnings | default([]) + ["[WARNING] You need to add the private SSL certificate manually to {{ server_path }}/{{ xroad_securityserver_private_cert_filename }}"] }}'
  when: ss_private_cert.stat.exists==False


- name: Make sure private cert has proper file permissions
  file:
    dest: "{{ server_path }}/{{ xroad_securityserver_private_cert_filename }}"
    owner: "{{ www_user }}"
    group: "{{ www_user }}"
    mode: "0600"
  when: ss_private_cert.stat.exists


- name: Copy CKAN configuration
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }} owner={{ item.owner }} group={{ item.group }}
  with_items:
    - { src: ckan.ini.j2, dest: "{{ ckan_ini }}", mode: "0640", owner: root, group: "{{ www_group }}" }
    - { src: who.ini.j2, dest: /etc/ckan/default/who.ini, mode: "0640", owner: root, group: "{{ www_group }}" }
    - { src: ckan-uwsgi-supervisor.conf.j2, dest: /etc/supervisor/conf.d/ckan-uwsgi.conf, mode: "0640", owner: root, group: "{{ www_group }}" }
    - { src: wsgi.py, dest: "{{ ckan_wsgi_script }}", mode: "0640", owner: root, group: "{{ www_group }}" }
    - { src: ckan-uwsgi.ini.j2, dest: "{{ ckan_uwsgi_conf }}", mode: "0640", owner: root, group: "{{ www_group }}" }

- name: Setup beaker session cleanup script
  template:
    src: "beaker_session_cleanup.sh.j2"
    dest: "/usr/local/sbin/beaker_session_cleanup.sh"
    mode: "0500"
    owner: root
    group: "root"

- name: Install CKAN frontend requirements
  shell: npm install --only=prod chdir={{ virtualenv }}/src/ckan

- include: patch.yml

- include: database.yml

- name: Disable emails in cron
  cronvar: name="MAILTO" value="\"\""

# Check new harvester jobs twice a day, does not execute harvesting if there are no new jobs
- name: Ensure harvester cronjob
  cron: name="Harvester run" minute="*/15" job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" harvester run"

- name: Ensure xroad organization data cronjob
  cron: name="X-Road organization data update" special_time=daily job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" xroad update-xroad-organizations"

- name: Ensure tracking cronjob
  cron: name="Tracking update" special_time=hourly job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" tracking update && {{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" search-index rebuild -r && {{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" sitesearch rebuild organizations"

- name: Ensure link validation cronjob
  cron: name="Link validator update" special_time=weekly job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" links crawl"

- name: Ensure fetch xroad errors cronjob
  cron: name="Fetch XRoad Errors" special_time=daily job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" xroad fetch-errors"

- name: Ensure fetch xroad stats cronjob
  cron: name="Fetch X-Road Stats" special_time=daily job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" xroad fetch-stats"

- name: Ensure fetch xroad distinct service stats cronjob
  cron: name="Fetch X-Road Distinct Service Stats" special_time=daily job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" xroad fetch-distinct-service-stats"

- name: Ensure fetch xroad services cronjob
  cron: name="Fetch X-Road Services" special_time=daily job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" xroad fetch-service-list"

- name: Ensure check xroad heartbeat cronjob
  cron: name="Check X-Road Catalog Heartbeat" special_time=hourly job="{{ virtualenv }}/bin/ckan --config "{{ ckan_ini }}" xroad fetch-heartbeat"

- name: Ensure create organization users cronjob
  cron: name="Create organization users" special_time=daily job="{{ virtualenv }}/bin/ckan --config '{{ ckan_ini }}' apicatalog-admin create-organization-users --retry"


- name: Send harvester status report emails as a cron job
  cron:
    name: "Send harvester status report emails"
    minute: "0"
    hour: "11"
    job: "{{ virtualenv }}/bin/ckan --config '{{ ckan_ini }}' apicatalog-harvest send-status-emails --force"

- name: Send batch run report emails as a cron job
  cron:
    name: "Send batch run report emails"
    minute: "0"
    hour: "11"
    job: "{{ virtualenv }}/bin/ckan --config '{{ ckan_ini }}' xroad send-latest-batch-run-results-email"

- name: Ensure clear beaker sessions cronjob
  cron:
    name: "Clear beaker sessions from disk"
    minute: "0"
    hour: "0"
    job: "find /tmp/default/sessions -type f -mtime +3 -print -exec rm {} ';'"

- name: Remove old beaker sessions from beaker_cache table
  cron:
    name: "Remove old beaker sessions"
    minute: "0"
    hour: "3"
    job: "/usr/local/sbin/beaker_session_cleanup.sh > /dev/null 2>&1"

- name: Modify allowed robots
  template:
    src: robots.txt.j2
    dest: "{{ virtualenv }}/src/ckan/ckan/public/robots.txt"
    owner: root
    group: root
    mode: 0644

- name: Update supervisor configuration
  shell: supervisorctl update

- name: Start CKAN
  shell: supervisorctl restart "{{ ckan_supervisor_name }}:*"
