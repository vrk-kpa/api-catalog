# Default server to block undefined hostnames
server {
    listen 443 ssl;
    ssl_certificate {{ ssl_certificate_path }}/{{ ssl_cert_filename }};
    ssl_certificate_key {{ ssl_certificate_path }}/{{ ssl_key_filename }};
    return 404;
}

server {

  listen 443 ssl;
  server_name {{ public_facing_hostname }};
  ssl_certificate {{ ssl_certificate_path }}/{{ ssl_cert_filename }};
  ssl_certificate_key {{ ssl_certificate_path }}/{{ ssl_key_filename }};

  error_page 500 502 503 504 /50x.html;

  location = /50x.html {
    root {{ static_path }};
    internal;
  }

  location / {
    proxy_pass http://127.0.0.1:8080/;
    proxy_set_header X-Url-Scheme $scheme;
    proxy_set_header Host $host;
  }

  include snippets/nginx_security_headers.conf;
}

{% if nginx.alternative_hostnames %}
# Redirect from alternative hostnames to primary hostname
server {
  listen 443 ssl;
  ssl_certificate {{ ssl_certificate_path }}/{{ ssl_cert_filename }};
  ssl_certificate_key {{ ssl_certificate_path }}/{{ ssl_key_filename }};
  server_name {{ nginx.alternative_hostnames }};
  return 301 https://{{ public_facing_hostname }}$request_uri;
}
{% endif %}

{% if nginx.alternative_hostnames_with_alternative_certificate | default("") %}
# Redirect from alternative hostnames to primary hostname
server {
  listen 443 ssl;
  ssl_certificate {{ ssl_certificate_path }}/{{ alternative_ssl_cert_filename }};
  ssl_certificate_key {{ ssl_certificate_path }}/{{ alternative_ssl_key_filename }};
  server_name {{ nginx.alternative_hostnames_with_alternative_certificate }};
  return 301 https://{{ public_facing_hostname }}$request_uri;
}
{% endif %}



# Redirect HTTP to HTTPS
server {
  listen 80;
  server_name {{ public_facing_hostname }};
  return 301 https://$server_name$request_uri;
}
